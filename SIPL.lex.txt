import java.io.FileInputStream;

class Yytoken {
	private lexeme type;
	private String val;

	public static enum lexeme {MINUS,PLUS,MULTIP,DIVIDE,SLASH,EQ,
							   EQEQ,LTHAN,LTHANEQ,GTHAN,GTHANEQ,
							   NOTEQ,SEMICOL,TRUE,FALSE,AND,BEGIN,DO,
							   ELSE,END,IF,INPUT,NOT,OR,OUTPUT,THEN,
							   VAR,WHILE,IDEN,INT,COMMENT
							   };

	public Yytoken(lexeme t, String v) {	
		type = t;
		val    = v;
	}
	public lexeme getType() {
		return type;
	}
	public String getVal() {
		return val;
	}
}

class SIPL {

    public static void main(String argv[]) throws java.io.IOException {
		FileInputStream in = null;

	    try {
	        in = new FileInputStream("SIPLtest.txt");
		}
		finally {}
		Yylex yy = new Yylex(in);
		Yytoken t;
		while ((t = yy.yylex()) != null)
		    System.out.println(t.getVal());
    }

}

%%

%state DUMMY
%line
%char
%notunix

%%
<YYINITIAL> [\ \r\n\t\b]* {System.out.println("whitespace found");}

<YYINITIAL> "(" {System.out.println("right bracet found");}

<YYINITIAL> ")" {System.out.println("left bracet found");}
"-" {System.out.println("minus found");return new Yytoken(Yytoken.lexeme.MINUS,"");}
"+" {System.out.println("plus found");return new Yytoken(Yytoken.lexeme.PLUS,"");}
"*" {System.out.println("multiply found");return new Yytoken(Yytoken.lexeme.MULTIP,"");}
"/" {System.out.println("divide found");return new Yytoken(Yytoken.lexeme.DIVIDE,"");}
":=" {System.out.println("equals found");return new Yytoken(Yytoken.lexeme.EQ,"");}
"<" {System.out.println("less than found");return new Yytoken(Yytoken.lexeme.LTHAN,"");}
"<=" {System.out.println("less than or equals found");
		return new Yytoken(Yytoken.lexeme.LTHANEQ,"");}
">" {System.out.println("greater than found");return new Yytoken(Yytoken.lexeme.GTHAN,"");}
">=" {System.out.println("greater than or equals found");
	  return new Yytoken(Yytoken.lexeme.GTHANEQ,"");}
"==" {System.out.println("equalequal found");return new Yytoken(Yytoken.lexeme.EQEQ,"");}
"!=" {System.out.println("notequals found");return new Yytoken(Yytoken.lexeme.NOTEQ,"");} 
";" {System.out.println("semicolon found");return new Yytoken(Yytoken.lexeme.SEMICOL,"");}

"true" {System.out.println("true found");return new Yytoken(Yytoken.lexeme.TRUE,"");}
"false" {System.out.println("false found");return new Yytoken(Yytoken.lexeme.FALSE,"");}

"and" {System.out.println("and found");return new Yytoken(Yytoken.lexeme.AND,"");}
"begin" {System.out.println("begin found");return new Yytoken(Yytoken.lexeme.BEGIN,"");}
"do" {System.out.println("do found");return new Yytoken(Yytoken.lexeme.DO,"");}
"else" {System.out.println("else found");return new Yytoken(Yytoken.lexeme.ELSE,"");}
"end" {System.out.println("end found");return new Yytoken(Yytoken.lexeme.END,"");}
"if" {System.out.println("if found");return new Yytoken(Yytoken.lexeme.IF,"");}
"input" {System.out.println("input found");return new Yytoken(Yytoken.lexeme.INPUT,"");}
"not" {System.out.println("not found");return new Yytoken(Yytoken.lexeme.NOT,"");}
"or" {System.out.println("or found");return new Yytoken(Yytoken.lexeme.OR,"");}
"output" {System.out.println("output found");return new Yytoken(Yytoken.lexeme.OUTPUT,"");}
"then" {System.out.println("then found");return new Yytoken(Yytoken.lexeme.THEN,"");}
"var" {System.out.println("var found");return new Yytoken(Yytoken.lexeme.VAR,"");}
"while" {System.out.println("while found");return new Yytoken(Yytoken.lexeme.WHILE,"");}

<DUMMY> . {/*next pattern matches identifiers*/}
[_a-zA-Z][a-zA-Z0-9]* {System.out.println("identifier found");return new Yytoken(Yytoken.lexeme.IDEN,yytext());}
<DUMMY> . {/*next pattern matches integers*/}
[+-]?[0-9]+ {System.out.println("integer found");return new Yytoken(Yytoken.lexeme.INT,yytext());}
<DUMMY> . {/*next pattern matches line comments*/}
//[^\r]*\r {System.out.println("line comment found");return new Yytoken(Yytoken.lexeme.COMMENT,"");}
