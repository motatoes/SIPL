
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Nov 26 14:48:06 AST 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.FileInputStream;

/** CUP v0.10k generated parser.
  * @version Mon Nov 26 14:48:06 AST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\003\003\000\002\002\004\000\002\027" +
    "\002\000\002\005\007\000\002\030\002\000\002\004\007" +
    "\000\002\004\002\000\002\006\003\000\002\006\003\000" +
    "\002\006\002\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\010\005\000\002\011\005\000\002\012\010" +
    "\000\002\012\006\000\002\031\002\000\002\013\007\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\015\004\000\002\016" +
    "\004\000\002\017\005\000\002\017\005\000\002\017\003" +
    "\000\002\022\005\000\002\022\005\000\002\022\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\005\000\002" +
    "\023\004\000\002\020\005\000\002\020\005\000\002\020" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\004" +
    "\000\002\021\003\000\002\024\005\000\002\024\003\000" +
    "\002\026\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\004\025\006\001\002\000\004\002\126\001" +
    "\002\000\004\002\001\001\002\000\024\021\ufffb\025\ufffb" +
    "\030\ufffb\031\ufffb\032\ufffb\035\ufffb\037\007\040\ufffb\041" +
    "\ufffb\001\002\000\004\041\122\001\002\000\022\021\uffff" +
    "\025\uffff\030\uffff\031\uffff\032\uffff\035\uffff\040\uffff\041" +
    "\uffff\001\002\000\022\021\ufff8\025\006\030\ufff8\031\025" +
    "\032\022\035\017\040\014\041\020\001\002\000\010\021" +
    "\ufff6\027\ufff6\030\ufff6\001\002\000\006\021\117\030\120" +
    "\001\002\000\020\004\030\011\044\022\033\023\037\033" +
    "\043\041\034\042\032\001\002\000\006\021\ufff9\030\ufff9" +
    "\001\002\000\010\021\ufff7\027\ufff7\030\ufff7\001\002\000" +
    "\012\004\030\011\044\041\034\042\032\001\002\000\004" +
    "\010\103\001\002\000\010\021\ufff2\027\ufff2\030\ufff2\001" +
    "\002\000\004\041\102\001\002\000\010\021\ufff4\027\ufff4" +
    "\030\ufff4\001\002\000\010\021\ufff5\027\ufff5\030\ufff5\001" +
    "\002\000\020\004\030\011\044\022\033\023\037\033\043" +
    "\041\034\042\032\001\002\000\010\021\ufff3\027\ufff3\030" +
    "\ufff3\001\002\000\006\021\ufffa\030\ufffa\001\002\000\012" +
    "\004\030\011\044\041\034\042\032\001\002\000\012\024" +
    "\uffd8\026\uffd8\034\uffd8\036\uffd8\001\002\000\046\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\024\uffde\026\uffde" +
    "\027\uffde\030\uffde\034\uffde\036\uffde\001\002\000\012\024" +
    "\uffd7\026\uffd7\034\uffd7\036\uffd7\001\002\000\046\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\024\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\034\uffdd\036\uffdd\001\002\000\012\024" +
    "\uffd4\026\uffd4\034\uffd4\036\uffd4\001\002\000\032\004\061" +
    "\005\060\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\024\uffd1\026\uffd1\034\uffd1\036\uffd1\001\002\000\012" +
    "\024\uffd6\026\uffd6\034\uffd6\036\uffd6\001\002\000\046\004" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\024\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\034\uffdf\036\uffdf\001\002\000\026" +
    "\013\077\014\071\015\074\016\075\017\072\020\076\024" +
    "\uffd2\026\uffd2\034\uffd2\036\uffd2\001\002\000\046\004\uffe2" +
    "\005\uffe2\006\066\007\065\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\024\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\034\uffe2\036\uffe2\001\002\000\020\004" +
    "\030\011\044\022\033\023\037\033\043\041\034\042\032" +
    "\001\002\000\012\004\030\011\044\041\034\042\032\001" +
    "\002\000\010\024\046\034\050\036\047\001\002\000\020" +
    "\004\030\011\044\022\033\023\037\033\043\041\034\042" +
    "\032\001\002\000\016\025\006\031\025\032\022\035\017" +
    "\040\014\041\020\001\002\000\020\004\030\011\044\022" +
    "\033\023\037\033\043\041\034\042\032\001\002\000\012" +
    "\024\uffd9\026\uffd9\034\uffd9\036\uffd9\001\002\000\010\021" +
    "\uffee\027\053\030\uffee\001\002\000\016\025\006\031\025" +
    "\032\022\035\017\040\014\041\020\001\002\000\010\021" +
    "\uffef\027\uffef\030\uffef\001\002\000\012\024\uffda\026\uffda" +
    "\034\uffda\036\uffda\001\002\000\010\004\061\005\060\012" +
    "\057\001\002\000\046\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc\034\uffdc" +
    "\036\uffdc\001\002\000\012\004\030\011\044\041\034\042" +
    "\032\001\002\000\012\004\030\011\044\041\034\042\032" +
    "\001\002\000\046\004\uffe3\005\uffe3\006\uffe3\007\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\024\uffe3\026\uffe3\027\uffe3\030\uffe3\034\uffe3\036" +
    "\uffe3\001\002\000\046\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4\034\uffe4" +
    "\036\uffe4\001\002\000\012\024\uffd5\026\uffd5\034\uffd5\036" +
    "\uffd5\001\002\000\012\004\030\011\044\041\034\042\032" +
    "\001\002\000\012\004\030\011\044\041\034\042\032\001" +
    "\002\000\046\004\uffe1\005\uffe1\006\uffe1\007\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\024\uffe1\026\uffe1\027\uffe1\030\uffe1\034\uffe1\036\uffe1" +
    "\001\002\000\046\004\uffe0\005\uffe0\006\uffe0\007\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\024\uffe0\026\uffe0\027\uffe0\030\uffe0\034\uffe0\036" +
    "\uffe0\001\002\000\012\004\uffcf\011\uffcf\041\uffcf\042\uffcf" +
    "\001\002\000\012\004\uffcc\011\uffcc\041\uffcc\042\uffcc\001" +
    "\002\000\012\004\030\011\044\041\034\042\032\001\002" +
    "\000\012\004\uffce\011\uffce\041\uffce\042\uffce\001\002\000" +
    "\012\004\uffcd\011\uffcd\041\uffcd\042\uffcd\001\002\000\012" +
    "\004\uffcb\011\uffcb\041\uffcb\042\uffcb\001\002\000\012\004" +
    "\uffd0\011\uffd0\041\uffd0\042\uffd0\001\002\000\012\024\uffd3" +
    "\026\uffd3\034\uffd3\036\uffd3\001\002\000\046\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\024\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\034\uffdb\036\uffdb\001\002\000\010\021\uffe6" +
    "\027\uffe6\030\uffe6\001\002\000\012\004\030\011\044\041" +
    "\034\042\032\001\002\000\014\004\061\005\060\021\ufff1" +
    "\027\ufff1\030\ufff1\001\002\000\014\004\061\005\060\021" +
    "\uffe5\027\uffe5\030\uffe5\001\002\000\010\024\046\026\uffed" +
    "\034\050\001\002\000\004\026\110\001\002\000\014\025" +
    "\006\032\022\035\017\040\014\041\020\001\002\000\010" +
    "\021\uffe9\027\uffe9\030\uffe9\001\002\000\010\021\uffec\027" +
    "\uffec\030\uffec\001\002\000\010\021\uffeb\027\uffeb\030\uffeb" +
    "\001\002\000\010\021\uffe8\027\uffe8\030\uffe8\001\002\000" +
    "\010\021\uffe7\027\uffe7\030\uffe7\001\002\000\010\021\uffea" +
    "\027\uffea\030\uffea\001\002\000\022\021\ufff8\025\006\030" +
    "\ufff8\031\025\032\022\035\017\040\014\041\020\001\002" +
    "\000\012\002\ufffe\021\ufffe\027\ufffe\030\ufffe\001\002\000" +
    "\006\021\ufff0\030\ufff0\001\002\000\004\021\ufffd\001\002" +
    "\000\004\021\124\001\002\000\024\021\ufffb\025\ufffb\030" +
    "\ufffb\031\ufffb\032\ufffb\035\ufffb\037\007\040\ufffb\041\ufffb" +
    "\001\002\000\022\021\ufffc\025\ufffc\030\ufffc\031\ufffc\032" +
    "\ufffc\035\ufffc\040\ufffc\041\ufffc\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\006\003\003\005\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\007\001\001\000\002" +
    "\001\001\000\004\027\010\001\001\000\024\005\015\006" +
    "\012\007\026\010\011\011\014\012\025\013\020\015\023" +
    "\016\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\017\035\020\105\021\030\022\041\023\037\024\034" +
    "\026\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\104\022\041\023\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\017\035\020\044\021\030\022\041" +
    "\023\037\024\034\026\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\100\022\041\023\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\072\001\001\000" +
    "\002\001\001\000\016\017\035\021\063\022\041\023\037" +
    "\024\034\026\040\001\001\000\010\017\055\022\041\023" +
    "\037\001\001\000\002\001\001\000\020\017\035\020\054" +
    "\021\030\022\041\023\037\024\034\026\040\001\001\000" +
    "\020\005\015\007\051\010\011\012\025\013\020\015\023" +
    "\016\022\001\001\000\020\017\035\020\050\021\030\022" +
    "\041\023\037\024\034\026\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\005\015\007\053\010\011\012" +
    "\025\013\020\015\023\016\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\062\022\041\023\037\001\001\000\010\017\061" +
    "\022\041\023\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\067\023\037\001\001" +
    "\000\006\022\066\023\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\035\022\041\023\037\026\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\103\022\041\023\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\106\001\001\000\002\001" +
    "\001\000\016\005\112\010\110\013\113\014\111\015\115" +
    "\016\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\015\006\120\007\026\010\011\011" +
    "\014\012\025\013\020\015\023\016\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\122\001\001\000" +
    "\002\001\001\000\004\004\124\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



		public Node root = null;

		//for storing recursive production rules
		public Node Temp = null;
		public Node Tempie = null;
		public Node Tempbe = null;

		public Node getTree() throws Exception {
			if (root == null) {
				this.parse();
			}
			return root;
		}

		public Node createNode(Object o) {
			return new Node( ((Node)o).GetValue(),"",false) ;
		}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Relop_Op ::= NOTEQ 
            {
              String RESULT = null;
		 RESULT = "noteq"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Relop_Op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Relop_Op ::= GTHANEQ 
            {
              String RESULT = null;
		 RESULT = "gthaneq"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Relop_Op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Relop_Op ::= LTHANEQ 
            {
              String RESULT = null;
		 RESULT = "lthaneq"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Relop_Op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Relop_Op ::= GTHAN 
            {
              String RESULT = null;
		 RESULT = "gthan"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Relop_Op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Relop_Op ::= LTHAN 
            {
              String RESULT = null;
		 RESULT = "lthan"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Relop_Op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Relop_Op ::= EQEQ 
            {
              String RESULT = null;
		 RESULT = "eqeq"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Relop_Op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Relop_Terminal ::= Int_Expression 
            {
              Node RESULT = null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node ie = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ie; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Relop_Terminal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Relop_Expression ::= Relop_Terminal 
            {
              Node RESULT = null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node rt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = rt; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Relop_Expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Relop_Expression ::= Relop_Terminal Relop_Op Relop_Terminal 
            {
              Node RESULT = null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node re = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int roleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int roright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ro = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node rt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Node(ro,"" , false,
								 	re,
								 	rt ); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Relop_Expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Bool_Negate ::= Relop_Expression 
            {
              Node RESULT = null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node re = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = re; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Bool_Negate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Bool_Negate ::= NOT Bool_Negate 
            {
              Node RESULT = null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node bn = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("not", "" , false, 
													 		bn ); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Bool_Negate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Bool_Negate ::= FALSE 
            {
              Node RESULT = null;
		RESULT = new Node("false","" , false); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Bool_Negate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Bool_Negate ::= TRUE 
            {
              Node RESULT = null;
		 RESULT = new Node("true","",false); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Bool_Negate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Bool_Expression ::= Bool_Negate 
            {
              Node RESULT = null;
		int neleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int neright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node ne = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 									
									RESULT = ne;
									 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Bool_Expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Bool_Expression ::= Bool_Expression OR Bool_Expression 
            {
              Node RESULT = null;
		int be1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int be1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node be1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int be2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int be2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node be2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
									parser.Tempbe =  new Node("EBexp", "", false, 
										new Node("OR","",false,
										be1,
										be2 )  );
										RESULT = parser.Tempbe; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Bool_Expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Bool_Expression ::= Bool_Expression AND Bool_Expression 
            {
              Node RESULT = null;
		int be1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int be1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node be1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int andright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int be2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int be2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node be2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
									parser.Tempbe =  new Node("EBexp", "", false, 
										new Node("AND","",false,
										be1,
										be2 )  );
										RESULT = parser.Tempbe; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Bool_Expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Factor ::= MINUS Int_Expression 
            {
              Node RESULT = null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node ie = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("minus","",false, 
																ie ); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Factor ::= LPAREN Int_Expression RPAREN 
            {
              Node RESULT = null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node ie = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ie; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Factor ::= IDEN 
            {
              Node RESULT = null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("iden",iden, false); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Factor ::= NUMBER 
            {
              Node RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("num",num,false); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expr_Terminal ::= Factor 
            {
              Node RESULT = null;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node fac = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = fac; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Expr_Terminal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expr_Terminal ::= Expr_Terminal DIVIDE Expr_Terminal 
            {
              Node RESULT = null;
		int et1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node et1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node et2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  parser.Tempie =  new Node("EFac", "", false, 
										new Node("EDIVIDE","",false,
										et1,
										et2 )  );
										RESULT = parser.Tempie; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Expr_Terminal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expr_Terminal ::= Expr_Terminal MULTIPLY Expr_Terminal 
            {
              Node RESULT = null;
		int et1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node et1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node et2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  parser.Tempie =  new Node("EFac", "", false, 
										new Node("ETIMES","",false,
										et1,
										et2 )  );
										RESULT = parser.Tempie; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Expr_Terminal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Int_Expression ::= Expr_Terminal 
            {
              Node RESULT = null;
		int etleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node et = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = et; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Int_Expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Int_Expression ::= Int_Expression MINUS Int_Expression 
            {
              Node RESULT = null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ie1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node ie2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.Tempie =  new Node("ETerm", "", false, 
										new Node("EMINUS","",false,
										ie1,
										ie2 )  );
										RESULT = parser.Tempie; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Int_Expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Int_Expression ::= Int_Expression PLUS Int_Expression 
            {
              Node RESULT = null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ie1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node ie2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
									parser.Tempie = new Node("ETerm", "", false, 
										new Node("EPLUS","",false,
										ie1,
										ie2 ) );
										RESULT = parser.Tempie; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Int_Expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Output ::= OUTPUT Int_Expression 
            {
              Node RESULT = null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node ie = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Node("output", "" , false,
															ie ); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Output*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Input ::= INPUT IDEN 
            {
              Node RESULT = null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Node("input","", false,
													new Node("iden", iden, false) ); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Input*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Loop_Body ::= Output 
            {
              Node RESULT = null;
		int outleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int outright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node out = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = out; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Loop_Body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Loop_Body ::= Looping 
            {
              Node RESULT = null;
		int loopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int loopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node loop = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = loop;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Loop_Body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Loop_Body ::= Assignment 
            {
              Node RESULT = null;
		int assleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node ass = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ass;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Loop_Body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Loop_Body ::= Input 
            {
              Node RESULT = null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node in = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = in; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Loop_Body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Loop_Body ::= Block 
            {
              Node RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Loop_Body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Looping ::= WHILE Bool_Expression NT$2 DO Loop_Body 
            {
              Node RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node be = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node lb = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("while", "", false, 
											new Node("loopcondition","",false,be),	
											new Node("loopbody","",false,lb) ); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Looping*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$2 ::= 
            {
              Object RESULT = null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node be = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 parser.Tempbe = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Conditional ::= IF Bool_Expression THEN Other_Commands 
            {
              Node RESULT = null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node be = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node oc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("if","",false,
												new Node( "ifcond", "" , false, be ),
												oc );
							parser.Tempbe = null;

						
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Conditional*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Conditional ::= IF Bool_Expression THEN Other_Commands ELSE Other_Commands 
            {
              Node RESULT = null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node be = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node oc1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node oc2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("if","",false,
											new Node( "ifcond", "" , false, be ) ,
											new Node("ifelsebody", "", false,
												new Node("ifbody", "",false, 
														oc1),
												new Node("elsebody","", false,
														oc2 ) ) );
							parser.Tempbe = null;
						
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Conditional*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sequence ::= Command SEMI Command 
            {
              Node RESULT = null;
		int com1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int com1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node com1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int com2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int com2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node com2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("seq", "", false,
														 com1 ,
														 com2 ) ; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Sequence*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Assignment ::= IDEN EQ Int_Expression 
            {
              Node RESULT = null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node ie = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("assignment","",false,
																	new Node("iden",iden,false),
																	ie ); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Assignment*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Other_Commands ::= Looping 
            {
              Node RESULT = null;
		int loopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int loopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node loop = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=loop; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Other_Commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Other_Commands ::= Conditional 
            {
              Node RESULT = null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node con = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=con; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Other_Commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Other_Commands ::= Output 
            {
              Node RESULT = null;
		int outleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int outright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node out = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = out; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Other_Commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Other_Commands ::= Input 
            {
              Node RESULT = null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node in = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=in; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Other_Commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Other_Commands ::= Assignment 
            {
              Node RESULT = null;
		int assleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node ass = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= ass; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Other_Commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Other_Commands ::= Block 
            {
              Node RESULT = null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node block = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=block; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Other_Commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Command ::= 
            {
              Node RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Command ::= Sequence 
            {
              Node RESULT = null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node seq = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = seq; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Command ::= Other_Commands 
            {
              Node RESULT = null;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node oc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = oc; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declarations ::= 
            {
              Node RESULT = null;
		 RESULT = parser.Temp ; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declarations ::= VAR IDEN NT$1 SEMI Declarations 
            {
              Node RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node dec = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.Temp;  
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT = null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;



					 parser.Temp = new Node("declaration","",false,
					 				new Node("iden", iden, false), parser.Temp );
					 RESULT = parser.Temp;
					
              CUP$parser$result = new java_cup.runtime.Symbol(22/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Block ::= BEGIN Declarations NT$0 Command END 
            {
              Node RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node dec = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node com = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						
						RESULT =  new Node("block","",false, dec,com );
															  
					
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT = null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node dec = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 parser.Temp= null;parser.Temp= null; 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Block 
            {
              Node RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						
						RESULT = new Node("program", "", false,b);
						 parser.root = (Node)RESULT;
					
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

