
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Nov 26 08:59:34 AST 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.FileInputStream;

/** CUP v0.10k generated parser.
  * @version Mon Nov 26 08:59:34 AST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\003\003\000\002\002\004\000\002\005" +
    "\006\000\002\027\002\000\002\004\007\000\002\004\002" +
    "\000\002\006\003\000\002\006\003\000\002\006\002\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\005\000\002\011\005\000\002\012\010\000\002\012\006" +
    "\000\002\013\006\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\004\000\002\016\004\000\002\017\005\000\002\017" +
    "\005\000\002\017\003\000\002\022\005\000\002\022\005" +
    "\000\002\022\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\005\000\002\023\004\000\002\020\005\000\002" +
    "\020\005\000\002\020\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\004\000\002\021\003\000\002\024\005" +
    "\000\002\024\003\000\002\026\003\000\002\026\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\004\025\006\001\002\000\004\002\125\001" +
    "\002\000\004\002\001\001\002\000\024\021\ufffc\025\ufffc" +
    "\030\ufffc\031\ufffc\032\ufffc\035\ufffc\037\007\040\ufffc\041" +
    "\ufffc\001\002\000\004\041\121\001\002\000\022\021\ufff9" +
    "\025\006\030\ufff9\031\023\032\022\035\016\040\014\041" +
    "\017\001\002\000\006\021\116\030\117\001\002\000\010" +
    "\021\ufff7\027\ufff7\030\ufff7\001\002\000\006\021\ufffa\030" +
    "\ufffa\001\002\000\014\022\032\023\034\033\036\041\031" +
    "\042\030\001\002\000\010\021\ufff8\027\ufff8\030\ufff8\001" +
    "\002\000\012\004\066\011\067\041\071\042\065\001\002" +
    "\000\004\010\062\001\002\000\010\021\ufff3\027\ufff3\030" +
    "\ufff3\001\002\000\010\021\ufff5\027\ufff5\030\ufff5\001\002" +
    "\000\004\041\061\001\002\000\014\022\032\023\034\033" +
    "\036\041\031\042\030\001\002\000\010\021\ufff6\027\ufff6" +
    "\030\ufff6\001\002\000\010\021\ufff4\027\ufff4\030\ufff4\001" +
    "\002\000\006\021\ufffb\030\ufffb\001\002\000\012\024\uffda" +
    "\026\uffda\034\uffda\036\uffda\001\002\000\026\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\024\uffd3\026\uffd3" +
    "\034\uffd3\036\uffd3\001\002\000\026\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\024\uffd2\026\uffd2\034\uffd2" +
    "\036\uffd2\001\002\000\012\024\uffd9\026\uffd9\034\uffd9\036" +
    "\uffd9\001\002\000\012\024\uffd6\026\uffd6\034\uffd6\036\uffd6" +
    "\001\002\000\012\024\uffd8\026\uffd8\034\uffd8\036\uffd8\001" +
    "\002\000\026\013\057\014\052\015\054\016\055\017\053" +
    "\020\056\024\uffd4\026\uffd4\034\uffd4\036\uffd4\001\002\000" +
    "\014\022\032\023\034\033\036\041\031\042\030\001\002" +
    "\000\010\024\040\034\042\036\041\001\002\000\014\022" +
    "\032\023\034\033\036\041\031\042\030\001\002\000\016" +
    "\025\006\031\023\032\022\035\016\040\014\041\017\001" +
    "\002\000\014\022\032\023\034\033\036\041\031\042\030" +
    "\001\002\000\012\024\uffdb\026\uffdb\034\uffdb\036\uffdb\001" +
    "\002\000\010\021\uffef\027\045\030\uffef\001\002\000\016" +
    "\025\006\031\023\032\022\035\016\040\014\041\017\001" +
    "\002\000\010\021\ufff0\027\ufff0\030\ufff0\001\002\000\012" +
    "\024\uffdc\026\uffdc\034\uffdc\036\uffdc\001\002\000\012\024" +
    "\uffd7\026\uffd7\034\uffd7\036\uffd7\001\002\000\006\041\031" +
    "\042\030\001\002\000\006\041\uffd0\042\uffd0\001\002\000" +
    "\006\041\uffcd\042\uffcd\001\002\000\006\041\uffcf\042\uffcf" +
    "\001\002\000\006\041\uffce\042\uffce\001\002\000\006\041" +
    "\uffcc\042\uffcc\001\002\000\006\041\uffd1\042\uffd1\001\002" +
    "\000\012\024\uffd5\026\uffd5\034\uffd5\036\uffd5\001\002\000" +
    "\010\021\uffe8\027\uffe8\030\uffe8\001\002\000\012\004\066" +
    "\011\067\041\071\042\065\001\002\000\022\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\012\uffe1\021\uffe1\027\uffe1\030\uffe1" +
    "\001\002\000\022\004\uffe4\005\uffe4\006\076\007\075\012" +
    "\uffe4\021\uffe4\027\uffe4\030\uffe4\001\002\000\022\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\012\uffe0\021\uffe0\027\uffe0\030" +
    "\uffe0\001\002\000\012\004\066\011\067\041\071\042\065" +
    "\001\002\000\012\004\066\011\067\041\071\042\065\001" +
    "\002\000\014\004\073\005\072\021\ufff2\027\ufff2\030\ufff2" +
    "\001\002\000\022\004\uffdf\005\uffdf\006\uffdf\007\uffdf\012" +
    "\uffdf\021\uffdf\027\uffdf\030\uffdf\001\002\000\012\004\066" +
    "\011\067\041\071\042\065\001\002\000\012\004\066\011" +
    "\067\041\071\042\065\001\002\000\022\004\uffe5\005\uffe5" +
    "\006\uffe5\007\uffe5\012\uffe5\021\uffe5\027\uffe5\030\uffe5\001" +
    "\002\000\012\004\066\011\067\041\071\042\065\001\002" +
    "\000\012\004\066\011\067\041\071\042\065\001\002\000" +
    "\022\004\uffe3\005\uffe3\006\uffe3\007\uffe3\012\uffe3\021\uffe3" +
    "\027\uffe3\030\uffe3\001\002\000\022\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\012\uffe2\021\uffe2\027\uffe2\030\uffe2\001\002" +
    "\000\022\004\uffe6\005\uffe6\006\uffe6\007\uffe6\012\uffe6\021" +
    "\uffe6\027\uffe6\030\uffe6\001\002\000\010\004\073\005\072" +
    "\012\103\001\002\000\022\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\012\uffde\021\uffde\027\uffde\030\uffde\001\002\000\022" +
    "\004\uffdd\005\uffdd\006\uffdd\007\uffdd\012\uffdd\021\uffdd\027" +
    "\uffdd\030\uffdd\001\002\000\014\004\073\005\072\021\uffe7" +
    "\027\uffe7\030\uffe7\001\002\000\010\024\040\026\107\034" +
    "\042\001\002\000\014\025\006\032\022\035\016\040\014" +
    "\041\017\001\002\000\010\021\uffeb\027\uffeb\030\uffeb\001" +
    "\002\000\010\021\uffee\027\uffee\030\uffee\001\002\000\010" +
    "\021\uffed\027\uffed\030\uffed\001\002\000\010\021\uffea\027" +
    "\uffea\030\uffea\001\002\000\010\021\uffe9\027\uffe9\030\uffe9" +
    "\001\002\000\010\021\uffec\027\uffec\030\uffec\001\002\000" +
    "\022\021\ufff9\025\006\030\ufff9\031\023\032\022\035\016" +
    "\040\014\041\017\001\002\000\012\002\uffff\021\uffff\027" +
    "\uffff\030\uffff\001\002\000\006\021\ufff1\030\ufff1\001\002" +
    "\000\004\021\ufffe\001\002\000\004\021\123\001\002\000" +
    "\024\021\ufffc\025\ufffc\030\ufffc\031\ufffc\032\ufffc\035\ufffc" +
    "\037\007\040\ufffc\041\ufffc\001\002\000\022\021\ufffd\025" +
    "\ufffd\030\ufffd\031\ufffd\032\ufffd\035\ufffd\040\ufffd\041\ufffd" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\006\003\003\005\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\007\001\001\000\002" +
    "\001\001\000\024\005\014\006\010\007\025\010\011\011" +
    "\012\012\024\013\017\015\023\016\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\105\021\026\024\032\026\034\001\001\000\002\001\001" +
    "\000\010\017\104\022\063\023\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\020\036\021\026\024\032\026\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\050" +
    "\001\001\000\010\021\047\024\032\026\034\001\001\000" +
    "\002\001\001\000\010\021\046\024\032\026\034\001\001" +
    "\000\020\005\014\007\043\010\011\012\024\013\017\015" +
    "\023\016\020\001\001\000\010\021\042\024\032\026\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\014\007\045\010\011\012\024\013\017\015\023\016\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\067\022\063\023\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\103" +
    "\022\063\023\062\001\001\000\010\017\101\022\063\023" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\100\023\062\001\001\000\006\022\073\023\062\001" +
    "\001\000\002\001\001\000\004\023\077\001\001\000\004" +
    "\023\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\111\010\107\013\112\014\110\015\114\016\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\014\006\117\007\025\010\011\011\012\012\024\013" +
    "\017\015\023\016\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\121\001\001\000\002\001\001\000" +
    "\004\004\123\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



		public Node root = null;

		//for storing recursive production rules
		public Node Temp = null;

		public Node getTree() throws Exception {
			if (root == null) {
				this.parse();
			}
			return root;
		}

		public Node createNode(Object o) {
			return new Node( ((Node)o).GetValue(),"",false) ;
		}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Relop_Op ::= NOTEQ 
            {
              String RESULT = null;
		 RESULT = "noteq"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Relop_Op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Relop_Op ::= GTHANEQ 
            {
              String RESULT = null;
		 RESULT = "gthaneq"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Relop_Op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Relop_Op ::= LTHANEQ 
            {
              String RESULT = null;
		 RESULT = "lthaneq"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Relop_Op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Relop_Op ::= GTHAN 
            {
              String RESULT = null;
		 RESULT = "gthan"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Relop_Op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Relop_Op ::= LTHAN 
            {
              String RESULT = null;
		 RESULT = "lthan"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Relop_Op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Relop_Op ::= EQEQ 
            {
              String RESULT = null;
		 RESULT = "eqeq"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Relop_Op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Relop_Terminal ::= IDEN 
            {
              String RESULT = null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT =  iden; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Relop_Terminal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Relop_Terminal ::= NUMBER 
            {
              String RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT =  num; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Relop_Terminal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Relop_Expression ::= Relop_Terminal 
            {
              Node RESULT = null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("relopterminal",rt, false); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Relop_Expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Relop_Expression ::= Relop_Terminal Relop_Op Relop_Terminal 
            {
              Node RESULT = null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String re = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int roleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int roright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ro = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Node(ro,"" , false,
								 	new Node(re,"",false),
								 	new Node(rt, "" , false) ); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Relop_Expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Bool_Negate ::= Relop_Expression 
            {
              Node RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*Bool_Negate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Bool_Negate ::= NOT Bool_Negate 
            {
              Node RESULT = null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node bn = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("not", "" , false, 
													 		bn ); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Bool_Negate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Bool_Negate ::= FALSE 
            {
              Node RESULT = null;
		RESULT = new Node("false","" , false); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Bool_Negate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Bool_Negate ::= TRUE 
            {
              Node RESULT = null;
		 RESULT = new Node("true","",false); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Bool_Negate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Bool_Expression ::= Bool_Negate 
            {
              Node RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Bool_Expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Bool_Expression ::= Bool_Expression OR Bool_Negate 
            {
              Node RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Bool_Expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Bool_Expression ::= Bool_Expression AND Bool_Negate 
            {
              Node RESULT = null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node be = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int andright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node bn = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("AND", "", false, 
										be,
										bn ); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Bool_Expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Factor ::= MINUS Int_Expression 
            {
              Node RESULT = null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node ie = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("minus","",false, 
																ie ); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Factor ::= LPAREN Int_Expression RPAREN 
            {
              Node RESULT = null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node ie = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ie; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Factor ::= IDEN 
            {
              Node RESULT = null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("iden",iden, false); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Factor ::= NUMBER 
            {
              Node RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("num",num,false); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expr_Terminal ::= Factor 
            {
              Node RESULT = null;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node fac = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (Node)fac; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Expr_Terminal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expr_Terminal ::= Expr_Terminal DIVIDE Factor 
            {
              Node RESULT = null;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node fac = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("divide","",false, 
																			fac ); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Expr_Terminal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expr_Terminal ::= Expr_Terminal MULTIPLY Factor 
            {
              Node RESULT = null;
		int etleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node et = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node fac = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("multiply","",false,
									 	et,
									 	(Node)fac); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Expr_Terminal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Int_Expression ::= Expr_Terminal 
            {
              Node RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Int_Expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Int_Expression ::= Int_Expression MINUS Expr_Terminal 
            {
              Node RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Int_Expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Int_Expression ::= Int_Expression PLUS Expr_Terminal 
            {
              Node RESULT = null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ie = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node et = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("plus","", false,
										 ie,
										 et ); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Int_Expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Output ::= OUTPUT Int_Expression 
            {
              Node RESULT = null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node ie = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Node("output", "" , false,
															ie ); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Output*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Input ::= INPUT IDEN 
            {
              Node RESULT = null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Node("input","", false,
													new Node("iden", iden, false) ); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Input*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Loop_Body ::= Output 
            {
              Node RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*Loop_Body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Loop_Body ::= Looping 
            {
              Node RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*Loop_Body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Loop_Body ::= Assignment 
            {
              Node RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*Loop_Body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Loop_Body ::= Input 
            {
              Node RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*Loop_Body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Loop_Body ::= Block 
            {
              Node RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*Loop_Body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Looping ::= WHILE Bool_Expression DO Loop_Body 
            {
              Node RESULT = null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node be = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node lb = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("while", "", false, 
											be,	
											lb ); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Looping*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Conditional ::= IF Bool_Expression THEN Other_Commands 
            {
              Node RESULT = null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node be = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node oc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("if","",false,
												be,
												oc ); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Conditional*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Conditional ::= IF Bool_Expression THEN Other_Commands ELSE Other_Commands 
            {
              Node RESULT = null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node be = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node oc1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node oc2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("if","",false,
											be,
											new Node("ifelsebody", "", false,
												new Node("ifbody", "",false, 
														oc1),
												new Node("elsebody","", false,
														oc2 ) ) ); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Conditional*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Sequence ::= Command SEMI Command 
            {
              Node RESULT = null;
		int com1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int com1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node com1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int com2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int com2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node com2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 System.out.println("!!!!!!!!!!!!!");RESULT = new Node("semi", "", false,
														 com1 ,
														 com2 ) ; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Sequence*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Assignment ::= IDEN EQ Int_Expression 
            {
              Node RESULT = null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node ie = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node("eq","",false,
																	new Node("iden",iden,false),
																	parser.createNode(ie) ); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Assignment*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Other_Commands ::= Looping 
            {
              Node RESULT = null;
		int loopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int loopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node loop = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=loop; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Other_Commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Other_Commands ::= Conditional 
            {
              Node RESULT = null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node con = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=con; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Other_Commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Other_Commands ::= Output 
            {
              Node RESULT = null;
		int outleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int outright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node out = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = out; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Other_Commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Other_Commands ::= Input 
            {
              Node RESULT = null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node in = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=in; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Other_Commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Other_Commands ::= Assignment 
            {
              Node RESULT = null;
		int assleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node ass = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= ass; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Other_Commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Other_Commands ::= Block 
            {
              Node RESULT = null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node block = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=block; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Other_Commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Command ::= 
            {
              Node RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Command ::= Sequence 
            {
              Node RESULT = null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node seq = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = seq; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Command ::= Other_Commands 
            {
              Node RESULT = null;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node oc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = oc; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declarations ::= 
            {
              Node RESULT = null;
		 RESULT = new Node("declaration","", false); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declarations ::= VAR IDEN NT$0 SEMI Declarations 
            {
              Node RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node dec = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = dec; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT = null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

					 System.out.println(RESULT);
					 parser.Temp = new Node("declaration","",false,
					 				new Node("iden", iden, false), parser.Temp );
					 RESULT = parser.Temp;
																	
              CUP$parser$result = new java_cup.runtime.Symbol(21/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= BEGIN Declarations Command END 
            {
              Node RESULT = null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node dec = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node com = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						
						RESULT =  new Node("block","",false, dec,com );
															  
					
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Block 
            {
              Node RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						
						RESULT = new Node("program", "", false,b);
						 parser.root = (Node)RESULT;
					
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

